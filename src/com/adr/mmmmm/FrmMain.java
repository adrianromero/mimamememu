//    Mimamememu is launcher for M.A.M.E and other emulators.
//    Copyright (C) 2013 Adri√°n Romero Corchado.
//    https://github.com/adrianromero/mimamememu
//
//    This file is part of Mimamememu
//
//    Mimamememu is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Mimamememu is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Mimamememu.  If not, see <http://www.gnu.org/licenses/>.

package com.adr.mmmmm;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author adrian
 */
public class FrmMain extends javax.swing.JFrame {
    
    private GamesModel games;
    private ActionListener al;

    /**
     * Creates new form FrmMain
     */
    public FrmMain() {

        initComponents();

//        setUndecorated(true);
//        setResizable(false);
//        setAlwaysOnTop(true);
//        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
//        setBounds(0, 0, d.width, d.height);         
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put( KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE , 0), "close");
        getRootPane().getActionMap().put("close", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        }); 

        PlatformList pl = new PlatformList();
        
        games = new GamesModel();
        games.add(pl.createGame("005", "005", "MAME", "Sega", "1981", "Maze"));
        games.add(pl.createGame("10yard", "10-Yard Fight (World)", "MAME", "Irem", "1983", "Sports"));
        games.add(pl.createGame("11beat", "Eleven Beat", "MAME", "Hudson", "1998", "Not Classified"));
        games.add(pl.createGame("galaxian", "Galaxian", "MAME", "Namco", "xxxx", "xxxx"));
        games.add(pl.createGame("zelda", "Zelda", "SNES", "Nintendo", "xxxx", "xxxx"));

        jList1.setCellRenderer(new GamesItemRenderer());
        jList1.setModel(games);

        jList1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                GamesItem item = (GamesItem) jList1.getSelectedValue();
                if (item != null && me.getClickCount() == 2) {
                    System.out.println("Sending ACTION_PERFORMED to ActionListener " + item.getName());
                    if (al != null) {
                        al.actionPerformed(new ActionEvent(item, ActionEvent.ACTION_PERFORMED, item.getName()));
                    }
                    me.consume();
                }
            }
        });

        jList1.addKeyListener(new KeyAdapter() {          
            @Override
            public void keyTyped(KeyEvent ke) {
                GamesItem item = (GamesItem) jList1.getSelectedValue();

                if (item != null && ke.getKeyChar() == '\n') {
                    System.out.println("Sending ACTION_PERFORMED to ActionListener " + item.getName());
                    if (al != null) {
                        al.actionPerformed(new ActionEvent(item, ActionEvent.ACTION_PERFORMED, item.getName()));
                    }
                    ke.consume();
                }
            }
        });
            
        al = new GamesActionLauncher(this);
        
        // select first
        if (jList1.getModel().getSize() > 0) {
            jList1.setSelectedIndex(0);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MAME");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        setBounds(0, 0, 908, 407);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

        System.exit(0);

    }//GEN-LAST:event_formWindowClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
