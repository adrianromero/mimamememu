//    MIMAMEMEMU is a launcher for M.A.M.E and other emulators.
//    Copyright (C) 2013 Adri√°n Romero Corchado.
//    https://github.com/adrianromero/mimamememu
//
//    This file is part of Mimamememu
//
//    MIMAMEMEMU is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    MIMAMEMEMU is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with MIMAMEMEMU.  If not, see <http://www.gnu.org/licenses/>.


package com.adr.mmmmm.display;

import com.adr.mmmmm.GamesItem;
import com.adr.mmmmm.JPanelIcon;
import com.adr.mmmmm.Main;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

/**
 *
 * @author adrian
 */
public class RendererTitleAndName extends javax.swing.JPanel implements ListCellRenderer {
    
    protected static Border noFocusBorder;
    
    private JPanelIcon jicon ;
    /**
     * Creates new form GamesItemRenderer2
     */
    public RendererTitleAndName() {
        initComponents();
        
        jtitle.setFont(Main.FONT_NAME.deriveFont(18.0f));            
        
        jicon = new JPanelIcon(96, 128);
        jcell.add(jicon, BorderLayout.CENTER);
        
        if (noFocusBorder == null) {
            noFocusBorder = new EmptyBorder(1, 1, 1, 1);
        }

        setOpaque(true);
        setBorder(noFocusBorder);        
    }
    
    
    @Override
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        
        applyComponentOrientation(list.getComponentOrientation());
        
        if (isSelected) {          
            jcell.setBackground(list.getSelectionBackground());            
        } else {       
            jcell.setBackground(list.getBackground());
        }

        if (value == null) {
            jtitle.setText("");

            jicon.setImage(null);   
            
            jtitle.setForeground(Color.GRAY);
        } else {
            GamesItem item = (GamesItem) value;
            jtitle.setText(item.getTitle());

            jicon.setImage(item.getTitles());
            
            if (item.getCommand() == null) {
                // Not working game
                jtitle.setForeground(Color.GRAY);  
            } else if (isSelected) {
                // Selected, ready to run
                jtitle.setForeground(Color.WHITE);
            } else {
                jtitle.setForeground(Color.LIGHT_GRAY);
            }
        }

        setBorder((cellHasFocus) ? UIManager.getBorder("List.focusCellHighlightBorder") : noFocusBorder);

        return this;
    }
    
   /**
    * Overridden for performance reasons.
    */
    @Override protected void firePropertyChange(String propertyName, Object oldValue, Object newValue) {}
    @Override public void firePropertyChange(String propertyName, byte oldValue, byte newValue) {}
    @Override public void firePropertyChange(String propertyName, char oldValue, char newValue) {}
    @Override public void firePropertyChange(String propertyName, short oldValue, short newValue) {}
    @Override public void firePropertyChange(String propertyName, int oldValue, int newValue) {}
    @Override public void firePropertyChange(String propertyName, long oldValue, long newValue) {}
    @Override public void firePropertyChange(String propertyName, float oldValue, float newValue) {}
    @Override public void firePropertyChange(String propertyName, double oldValue, double newValue) {}
    @Override public void firePropertyChange(String propertyName, boolean oldValue, boolean newValue) {}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcell = new javax.swing.JPanel();
        jtitle = new javax.swing.JLabel();

        setBackground(javax.swing.UIManager.getDefaults().getColor("List.background"));
        setPreferredSize(new java.awt.Dimension(250, 250));
        setLayout(new java.awt.BorderLayout());

        jcell.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jcell.setLayout(new java.awt.BorderLayout());

        jtitle.setBackground(java.awt.Color.black);
        jtitle.setForeground(java.awt.Color.white);
        jtitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jtitle.setText("jtitle");
        jtitle.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jtitle.setOpaque(true);
        jcell.add(jtitle, java.awt.BorderLayout.PAGE_END);

        add(jcell, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jcell;
    private javax.swing.JLabel jtitle;
    // End of variables declaration//GEN-END:variables
}
